# https://ronsavage.github.io/SQL/sql-2003-2.bnf.html
grammar SQL
    rule select_clause  
        head:s query_specification      <SQL::Select>
    end
    
    rule query_specification
        SELECT set_quantifier? select_list table_expression
    end

    rule select_list 
          asterisk
        / select_sublist (comma select_sublist )*
    end

    rule select_sublist
        derived_column 
        # / qualified_asterisk
    end

    rule derived_column
        value_expression as_clause? 
        # <SQL::ColumnName>
    end

    rule as_clause
        AS? column_name 
    end

    rule column_name
        identifier
    end
    
    rule table_expression
        from_clause
        where_clause?
    # [ <group by clause> ]
    # [ <having clause> ]
    # [ <window clause> ] 
    end

    rule from_clause
        FROM table_reference_list
    end

    rule where_clause
        WHERE search_condition
    end

    rule table_reference_list
        table_reference ( comma table_reference)*
    end

    rule table_reference # <table primary or joined table> [ <sample clause> ] 
        table_primary # | <joined table> 
    end

    rule table_primary
        table_or_query_name ( AS? identifier)? # [ [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ] ]
    # |     <derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
    # |     <lateral derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
    # |     <collection derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
    # |     <table function derived table> [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ]
    # |     <only spec> [ [ AS ] <correlation name> [ <left paren> <derived column list> <right paren> ] ]
    # |     <left paren> <joined table> <right paren>
    end

    rule table_or_query_name
        table_name 1..1                     <SQL::TableName> 
        # | <query name>
    end

    rule table_name # <=> <local or schema qualified name> 
        (local_or_schema_qualifier period)? identifier
    end

    rule local_or_schema_qualifier
        identifier  # <schema name>
        # | MODULE 
    end

    # where
    rule search_condition
        boolean_value_expression
    end

    ### 
    # subquery
    rule subquery
        left_paren query_expression  right_paren
    end

    rule query_expression
        # [ <with clause> ] 
        query_expression_body
    end

    rule query_expression_body
        non_join_query_expression
        # | <joined table>
    end

    rule non_join_query_expression
        non_join_query_term
        # |     <query expression body> UNION [ ALL | DISTINCT ] [ <corresponding spec> ] <query term>
        # |     <query expression body> EXCEPT [ ALL | DISTINCT ] [ <corresponding spec> ] <query term>   
    end

    rule non_join_query_term
        non_join_query_primary
        # |     <query term> INTERSECT [ ALL | DISTINCT ] [ <corresponding spec> ] <query primary>
    end   

    rule non_join_query_primary
        simple_table 
        # | <left paren> <non-join query expression> <right paren>
    end

    rule simple_table
        query_specification
        # |     <table value constructor>
        # |     <explicit table>   
    end

    ###
    # expression
    rule value_expression
            common_value_expression
        /   boolean_value_expression
        /   row_value_expression
    end

    rule boolean_value_expression
        boolean_term OR boolean_value_expression    # inverted LL
        / boolean_term
    end

    rule boolean_term
        boolean_factor AND boolean_term             # inverted LL
        / boolean_factor
    end

    rule boolean_factor
        NOT? boolean_test
    end

    rule boolean_test
        boolean_primary (IS NOT? truth_value)?
    end

    rule boolean_primary
          predicate
        / boolean_predicand
    end

    rule boolean_predicand
          parenthesized_boolean_value_expression
        / nonparenthesized_value_expression_primary
    end        

    rule parenthesized_boolean_value_expression
        left_paren boolean_value_expression right_paren
    end

    rule predicate
        comparison_predicate
    # |     <between predicate>
      / in_predicate
    # |     <like predicate>
    # |     <similar predicate>
      / null_predicate
    # |     <quantified comparison predicate>
      / exists_predicate
    # |     <unique predicate>
    # |     <normalized predicate>
    # |     <match predicate>
    # |     <overlaps predicate>
    # |     <distinct predicate>
    # |     <member predicate>
    # |     <submultiset predicate>
    # |     <set predicate>
    # |     <type predicate>
    end   

    rule comparison_predicate
        row_value_predicand comp_op row_value_predicand
    end

    rule null_predicate
        row_value_predicand IS NOT? NULL
    end

    rule in_predicate
        row_value_predicand NOT? IN in_predicate_value
    end

    rule exists_predicate
        EXISTS subquery 
    end

    rule in_predicate_value
    #     <table subquery>
    # /
        left_paren in_value_list right_paren      
    end

    rule in_value_list
        row_value_expression ( comma row_value_expression)*
    end

    rule row_value_predicand
           nonparenthesized_value_expression_primary
        /  row_value_constructor_predicand
    end

    rule row_value_constructor_predicand
        common_value_expression
    /   boolean_predicand
    #|     <explicit_row_value_constructor>      
    end

    rule common_value_expression
        numeric_value_expression
    # |     <string value expression>
    # |     <datetime value expression>
    # |     <interval value expression>
    # |     <user-defined type value expression>
    # |     <reference value expression>
    # |     <collection value expression>    
    end

    rule numeric_value_expression
        term
    # |     <numeric value expression> <plus sign> <term>
    # |     <numeric value expression> <minus sign> <term>
    end

    rule term
        factor
    # |     <term> <asterisk> <factor>
    # |     <term> <solidus> <factor>
    end

    rule factor
        sign? numeric_primary
    end

    rule numeric_primary
        value_expression_primary
    # |     <numeric value function>  
    end

    rule value_expression_primary
        left_paren value_expression right_paren
    /   nonparenthesized_value_expression_primary
    end

    rule nonparenthesized_value_expression_primary
          unsigned_value_specification
        / method_invocation                                 # before column to recognize them
        / column_reference 1..1                     <SQL::ColumnReference>
    # |     <set function specification>
    # |     <window function>
    # |     <scalar subquery>
    # |     <case expression>
    # |     <cast specification>
    # |     <field reference>
    # |     <subtype treatment>
    # |     <static method invocation>
    # |     <new specification>
    # |     <attribute or method reference>
    # |     <reference resolution>
    # |     <collection value constructor>
    # |     <array element reference>
    # |     <multiset element reference>
    # |     <routine invocation>
    # |     <next value expression>        
    end

    rule column_reference
        identifier_chain # <=> basic_identifier_chain
    # |     MODULE <period> <qualified identifier> <period> <column name>        
    end
    
    rule method_invocation
        identifier_chain left_paren SQL_argument_list? right_paren # <direct invocation>
    # | <generalized invocation>
    end

    rule SQL_argument_list
         SQL_argument ( comma SQL_argument )*  
    end

    rule SQL_argument
        value_expression
    # |     <generalized expression>
    # |     <target specification>        
    end

    rule row_value_expression
        nonparenthesized_value_expression_primary   #     <row value special case>
        # |     <contextually typed row value constructor>    
    end

    ## Literals
    rule unsigned_value_specification
        unsigned_literal 
        # | <general value specification>
    end

    rule unsigned_literal
          unsigned_numeric_literal 
        / general_literal
    end

    rule unsigned_numeric_literal
        exact_numeric_literal 
        #| <approximate numeric literal>
    end

    rule exact_numeric_literal
        unsigned_integer ( period unsigned_integer? )? S
    /   period unsigned_integer S
    end       

    rule unsigned_integer
        [0..9]+
    end

    rule general_literal
        character_string_literal
    # |     <national character string literal>
    # |     <Unicode character string literal>
    # |     <binary string literal>
    # |     <datetime literal>
    # |     <interval literal>
    # |     <boolean literal>
    end

    rule character_string_literal
    # [ <introducer> <character set specification> ]
    # <quote> [ <character representation> ... ] <quote>
    # [ { <separator> <quote> [ <character representation> ... ] <quote> }... ]
        "'" ("''" / !"'" .)* "'" s
    end

    ## Identifiers
    rule method_name
        identifier
    end

    rule identifier_chain
        identifier (period identifier)?
    end

    rule identifier # <=> <actual identifier> 
                    # <=> <qualified identifier> 
        regular_identifier # | <delimited identifier>
    end

    rule regular_identifier  # <=> <identifier body>
        !keywords ':'? symbolchar+ !symbolchar s 
    end

    # keywords
    rule comp_op
          '=' s
        / '!=' s
        / '<>' s
        / '<=' s
        / '>=' s
        / '<' s
        / '>' s
    end

    rule sign
        '+' s
    / '-' s
    end

    rule left_paren
    '(' s
    end

    rule right_paren
    ')' s
    end

    rule asterisk
        '*' s
    end

    rule comma
        ',' s
    end

    rule period
        '.' s
    end

    rule keywords 
        SELECT / FROM / WHERE / AS / IS / IN / NULL
        / NOT / OR / AND 
        / EXISTS
        / truth_value / set_quantifier
    end

    rule truth_value
          'true'i kw
        / 'false'i kw
        / 'unknown'i kw
    end

    rule set_quantifier
          'distinct'i kw
        / 'all'i kw
    end

    rule SELECT
        'select'i kw
    end
    
    rule FROM
        'from'i kw
    end

    rule WHERE
        'where'i kw
    end

    rule AS
        'as'i kw
    end

    rule IS
        'is'i kw
    end

    rule IN
        'in'i kw
    end

    rule NULL
        'null'i kw
    end 

    rule NOT
        'not'i kw
    end 

    rule OR
        'or'i kw
    end

    rule AND
        'and'i kw
    end

    rule EXISTS
        'exists'i kw
    end

    # keyword end
    rule kw
        !symbolchar s
    end

    rule symbolchar
        [[:alnum:]_]
    end

    # space & comments
    rule s # Optional space
        (S / c_comment)*
    end

    rule S  # Mandatory space
        [ \t\n]+
    end

    rule c_comment
        '/*' ( !'*/' (. / "\n"))* '*/'
    end

    rule eol_comment
        '--' ( !"\n" .)* "\n"
    end
end
